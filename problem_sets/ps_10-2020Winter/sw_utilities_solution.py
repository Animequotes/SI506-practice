import requests, json

def get_swapi_resource(resource, params = None, timeout=20):
    """
    This function initiates an HTTP GET request to the SWAPI service in order to return a
    representation of a resource.

    If <params> is None, you don't need to include <params> when you make the GET request.

    Once you get the response from the request, check its status code
    If status code is equal to 200, which means the GET request succeeded, convert the response to python dict
    Else print "<status code> something wrong happened" and return None

    Parameters:
        resource (str): a url that specifies the resource.
        params (dict): optional dictionary of querystring arguments. The default value is None.
        timeout (int): timeout value in seconds. The default value is 5

    Returns:
        dict: dictionary representation of the decoded JSON.
    """

    if params:
        response = requests.get(resource, params=params,timeout=timeout)
    else:
        response = requests.get(resource, timeout=timeout)

    if response.status_code == 200:
        return response.json()
    else:
        print(f"{response.status_code} something wrong happened")
        return None


def convert_resource_to_obj(resource_dict, obj_class):
    """
    <resource_dict> should be a dictionary returned by <get_swapi_resource> or <read_json>.
    Use dictionary comprehension to generate property dict
        Loop over the key-value pair in resource dict
            If the key is in obj_class.properties, add the key-value pair into the property dict
    Use property dict to initiate an instance of the <obj_class>

    Parameters:
        resource (str): a url that specifies the resource.
        obj_class (cls): a class that initiates the instance

    Returns:
        instance (obj): an instance generated by <obj_class>.
    """
    property_dict = {k:v for (k,v) in resource_dict.items() if k in obj_class.properties}
    instance = obj_class(property_dict)
    return instance


def write_json(filepath, data):
    with open(filepath, 'w', encoding='utf-8') as file_obj:
        json.dump(data, file_obj, ensure_ascii=False, indent=2)


def read_json(filepath):
    with open(filepath, 'r', encoding='utf-8') as file_obj:
        data = json.load(file_obj)

    return data
